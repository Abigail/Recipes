#!/opt/perl/bin/perl

use 5.010;

use strict;
use warnings;
no  warnings 'syntax';
use autodie;

umask 022;

use Text::Markdown 'markdown';

opendir my $dh, "Src";
my @files = map {/^(.*)\.mkdn$/ ? $1 : ()} readdir $dh;

my %ingredients;
my %chefs;
my %sources;
my %dates;
my %types;

my $base_url = "http://www.abigail.be/Recipes";
my $img_url  = "$base_url/Images";
my $html_url = "$base_url/HTML";
my $xmlns    = "http://www.w3.org/1999/xhtml";
my $xmlns_fb = "http://ogp.me/ns/fb#";

my %icon = (
    prev         =>  "&#x27F5;",
    next         =>  "&#x27F6;",
    list         =>  "&#x2934;",
    ingredients  =>  "&#x24BE;",
    types        =>  "&#x24C9;",
    chefs        =>  "&#x24B8;",
    sources      =>  "&#x24C8;",
);

sub nav_bar {
    my %args = @_;

    my %links;

    foreach my $key (qw [prev next]) {
        if ($args {$key}) {
            $links {$key} = sprintf "<a href = '%s.html'>%s</a>" =>
                                      $args {$key}, $icon {$key}
        }
        else {
            $links {$key} = sprintf "<span style = 'visibility: hidden'>" .
                                    "%s</span>" => $icon {$key}
        }
    }

    foreach my $key (qw [ingredients types chefs sources list]) {
        $links {$key} =
           sprintf "<a href = '%s.html' title = '%s' " .
                                       "style = 'visibility: %s'>%s</a>" =>
                      $key, ucfirst ($key),
                            $args {"is_$key"} ? "hidden" : "visibile",
                            $icon {$key};
    }

    my $nav_bar = sprintf "<hr><div class = 'prev'>%s %s%s%s%s</div>" .
                              "<div class = 'next'>%s %s</div><br><hr>" =>
                          map {$links {$_}} qw [prev ingredients types
                                                chefs sources list next];

    return $nav_bar;
}


sub recipe {
    my ($line, $name, $title) = @_;
    my @parts = $line =~ /("[^"]+"|\S+)/g;
    @parts = map {/"(.*)"/ ? $1 : $_} @parts;
    if ($parts [0] eq "BBC") {
        push @{$chefs {$parts [2]}} => [$name, $title];
        push @{$sources {BBC}}      => [$name, $title];
        return 
          sprintf "Based on a [recipe](http://www.bbc.co.uk/food/recipes/%s) " .
                  'from [%s](http://www.bbc.co.uk/food/chefs/%s "%s").'  =>
                  $parts [1], $parts [2], $parts [3], $parts [2];
    }
    elsif ($parts [0] eq "Simply") {
        my $chef = $parts [2] // "Elise Bauer";
        my $path = lc ($chef =~ s/ .*//r);
        push @{$chefs {$chef}}              => [$name, $title];
        push @{$sources {"Simply Recipes"}} => [$name, $title];
        return
          sprintf "Based on a [recipe]"                                      .
                  "(http://www.simplyrecipes.com/recipes/%s) "               .
                  "from [%s](http://www.simplyrecipes.com/author/%s/)." =>
                  $parts [1], $chef, $path;
    }
    elsif ($parts [0] eq "Sprinkle") {
        my $chef = $parts [2] // "Heather Baird";
        push @{$chefs {$chef}}              => [$name, $title];
        push @{$sources {"Sprinkle Bakes"}} => [$name, $title];
        return 
          sprintf "Based on a [recipe]"                                       .
                  "(http://www.sprinklebakes.com/%s.html) "                   .
                  "from [%s](http://www.sprinklebakes.com/p/about.html). " =>
                  $parts [1], $chef
    }
    return $line;
}

my @merges = ([\%types  =>  "Fish"      =>  "Fish & Sea food"],
              [\%types  =>  "Sea food"  =>  "Fish & Sea food"]);

for (my $i = 0; $i < @files; $i ++) {
    my $name = $files [$i];
    open my $fh_in,  "<", "Src/$name.mkdn";

    local $/;
    my $text = <$fh_in>;
    close $fh_in;

    #
    # Find the first line with a title
    #
    my $title = "";
    if ($text =~ /^#\s+(.*)/m) {
        $title = $1;
    }

    #
    # Preprocess the markdown
    #
    $text =~ s {(!\[[^]]*\]\()} {$1../Images/}g;

    my $image;
    while ($text =~ s {^Image:\s*(?:Images/)?(\S+?)(?:\.jpg)?(?: +(.*\S))?\s*$}
                      {"![" . ($2 // $title) . "](../Images/$1.jpg " .
                       '"' . ($2 // $title) . '")'}em) {
        $image //= $1;
    }

    $text =~ s {^Recipe:\s*(.*)}{recipe $1, $name, $title}gem;

    #
    # Grep meta data
    #
    while ($text =~
             s/^(Ingredients?|Chefs?|Sources?|Types?):\s*(\#.*)\n//mi) {
        my $type    = $1;
        my $entries = $2;
        while ($entries =~ /#([^#]+)/g) {
            my $entry = $1;
            $entry =~ s/\s+$//;
            $entry =~ s/\s+/ /g;
            my $type_data = $type =~ /^Ingredients/i ? \%ingredients
                          : $type =~ /^Chef/i        ? \%chefs
                          : $type =~ /^Source/i      ? \%sources
                          : $type =~ /^Type/i        ? \%types
                          : die "Huh?\n";
            push @{$$type_data {$entry}} => [$name, $title];
        }
    }

    #
    # Merge categories
    #
    foreach my $map_info (@merges) {
        my ($type_data, $from, $to) = @$map_info;
        if ($$type_data {$from}) {
            push @{$$type_data {$to}} => @{delete $$type_data {$from}};
        }
    }

    my @dates;
    while ($text =~ s/^Dates?:\s*([-0-9\s,]+)//m) {
        my $date_line = $1;
        push @dates => $date_line =~ /(20[0-9][0-9]-[0-9][0-9]-[0-9][0-9])/g;
    }
    unless (@dates) {
        if ($name =~ /^(20[0-9][0-9]-[0-9][0-9]-[0-9][0-9])/) {
            my $date = $1;
            push @dates => $1;
        }
    }
    foreach my $date (sort {$a cmp $b} @dates) {
        my $first = $date eq $dates [0];
        push @{$dates {$date}} => [$name, $title, $first];
    }

    #
    # Convert to HTML.
    #
    my $html = markdown ($text => {
        empty_element_suffix => ">",
    });

    open my $fh_out, ">", "HTML/$name.html";
    #
    # Post process the results.
    #
    my $nav_bar = nav_bar prev => $i > 0          ? $files [$i - 1] : undef,
                          next => $i < @files - 1 ? $files [$i + 1] : undef;

    $html =~ s{</h1>\K}{$nav_bar};

    my $meta = <<"    --";
        <meta property="og:url"   content = "$html_url/$name.html">
        <meta property="og:title" content = "$title">
    --
    $meta .= <<"    --" if $image;
        <meta property="og:image" content = "$img_url/$image.jpg">
    --

    print $fh_out <<"    --" =~ s/^\s+//gmr;
        <html xmlns = "$xmlns" xmlns:fb = "$xmlns_fb">
        <head>
        $meta
        <title>$title</title>
        <link rel = "stylesheet" type = "text/css" href = "../Styles/style.css">
        </head>
        <body>
        <div class = "outer">
        <div class = "main">
        $html
        </div>
        </div>
        </body>
    --

    close $fh_out;
}

my $date_html;
my $tag_html;
my $chef_html;
my $source_html;
my $type_html;
foreach my $date (sort {$b cmp $a} keys %dates) {
    foreach my $entry (sort {$$b [0] cmp $$a [0]} @{$dates {$date}}) {
        my ($name, $title, $first) = @$entry;
        $title = "<em>$title</em>" unless $first;
        $date_html .= "<li><a href = '$name.html'>$date $title</a></li>\n";
    }
}
if ($date_html) {
    $date_html = "<ul>$date_html</ul>";
}

foreach my $set ([\$tag_html,    \%ingredients],
                 [\$chef_html,   \%chefs],
                 [\$source_html, \%sources],
                 [\$type_html,   \%types]) {
    my ($html, $data) = @$set;
    $$html .= "<ul class = 'tag-list'>\n";
    foreach my $entry (sort {$a cmp $b} keys %$data) {
        $$html .= "<li class = 'tag-item'>$entry\n<ul>\n";
        my ($pname, $ptitle) = ("", "");
        foreach my $entry (sort {$$a [1] cmp $$b [1]} @{$$data {$entry}}) {
            my ($name, $title) = @$entry;
            next if $name eq $pname && $title eq $ptitle;
            $$html .= "<li><a href = '$name.html'>$title</a></li>\n";
            $pname  = $name;
            $ptitle = $title;
        }
        $$html .= "</ul>\n";
    }
    $$html .= "</ul>\n";
}

my $list_nav_bar = nav_bar is_list => 1;

open my $fh, ">", "HTML/list.html";
print $fh <<"--";
<html>
<head>
<title>Recipe Index</title>
<link rel = "stylesheet" type = "text/css" href = "../Styles/style.css">
</head>
<body>
<div class = "outer">
<div class = "main">
<h1>Recipe Index</h1>
$list_nav_bar
$date_html
</div>
</div>
</body>
--
close $fh;

foreach my $set ([$tag_html,    "Ingredients"],
                 [$chef_html,   "Chefs"],
                 [$source_html, "Sources"],
                 [$type_html,   "Types"]) {
    my ($html, $title) = @$set;
    my $file_name = lc "HTML/$title.html";
    my $nav_bar = nav_bar "is_\L$title" => 1;
    open $fh, ">", $file_name;
    print $fh <<"--";
<html>
<head>
<title>$title Index</title>
<link rel = "stylesheet" type = "text/css" href = "../Styles/style.css">
</head>
<body>
<div class = "outer">
<div class = "main">
<h1>$title Index</h1>
$nav_bar
$html
</div>
</div>
</body>
--
    close $fh;
}


__END__
